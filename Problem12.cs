using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ProjectEuler
{
	/*
	 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
	 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	 * Let us list the factors of the first seven triangle numbers:
		 1: 1
		 3: 1,3
		 6: 1,2,3,6
		10: 1,2,5,10
		15: 1,3,5,15
		21: 1,3,7,21
		28: 1,2,4,7,14,28
	 * We can see that 28 is the first triangle number to have over five divisors.
	 * What is the value of the first triangle number to have over five hundred divisors?
	 */
	class Problem12: Solution
	{
		public void Solve()
		{
			var query = from x in ParallelEnumerable.Range(1000, 100000)
						let n = TriangleNumber(x)
						let b = DivisorCount(n)
						where b >= 500
						select new
						{
							TriangleNumber = n,
							SeriesNumber = x,
							DivisorCount = b
						};

			Console.WriteLine("Solution for 12: {0}", query.First());
		}
		
		private int TriangleNumber(int n)
		{
			return (n * (n + 1)) / 2;
		}

		private int DivisorCount(int n)
		{
			int count = 2;  //1 and n
			for (int i = 1; i <= Math.Sqrt(n); i++)
			{
				if (n % i == 0)
				{
					count += 2;
				}
			}
			return count;
		}
	}
}
